/* 
 * File:   NetworkConfiguration.h
 * Author: Jan Vojt
 *
 * Created on June 5, 2014, 8:16 PM
 */

#ifndef NETWORKCONFIGURATION_H
#define	NETWORKCONFIGURATION_H

#include <cstdlib>

template <typename dType>
class NetworkConfiguration {
public:
    NetworkConfiguration();
    NetworkConfiguration(const NetworkConfiguration& orig);
    virtual ~NetworkConfiguration();
    // Returns number of layers in the network
    // including input and output layer.
    int getLayers();
    void setLayers(int layers);
    // Returns number of neurons indexed from zero.
    int getNeurons(int layer);
    // Sets number of neurons in given layer, layer being indexed from zero.
    void setNeurons(int layer, int neurons);
    // Enables or disables network bias.
    void setBias(bool enabled);
    // Returns whether bias is enabled.
    bool getBias();
    // Gets the minimum value generated by random generator
    // when initializing network weights.
    dType getInitMin();
    void setInitMin(dType min);
    // Gets the maximum value generated by random generator
    // when initializing network weights.
    dType getInitMax();
    void setInitMax(dType max);
    // Parse and set the interval for weight initialization.
    void parseInitInterval(const char *intervalConf);
    // Parse layer configuration from comma separated list of neuron counts.
    void parseLayerConf(char *layerConf);
    
    /**
     * Gets the comma-separated list of number of neurons in each respective
     * layers. The purpose is to simplify logging, so that the string does not
     * need to be rebuilt.
     * 
     * @return comma-separated string of the neuron configuration inside layers
     */
    char *getLayerConf();
    
    // Pointer to activation function normalizing the neurons potential.
    // Input potential is preserved and the normalized value
    // is put into the target array. It is also possible to provide
    // the same pointer for input and target for in-place computation
    // saving some memory.
    void (*activationFnc)(dType *x, dType *y, int layerSize);
    // Derivative of activation function.
    void (*dActivationFnc)(dType *x, dType *y, int layerSize);
private:
    void initConf();
    
    /**
     * Parse and set the interval for weight and bias initialization.
     * 
     * @param intervalConf comma-separated interval
     * @param format format of parsed number
     */
    void parseInitInterval(const char *intervalConf, const char *format);
    
    // number of layers in a network
    int layers;
    // number of neurons in each network layer
    int *neuronConf;
    // flag determining whether the network uses bias, true by default
    bool bias;
    // Minimum value generated by random generator
    // when initializing network weights.
    dType initMin;
    // Maximum value generated by random generator
    // when initializing network weights.
    dType initMax;
    
    /** Comma-separated list of number of neurons in each respective layers. */
    char *layerConf = NULL;
};

#endif	/* NETWORKCONFIGURATION_H */

